{"ast":null,"code":"import axios from \"axios\";\n\n// Set up default configuration for axios\naxios.defaults.baseURL = \"https://housegram-fullstack-app-a01c6177ffd8.herokuapp.com\"; // Base URL for all axios requests, adjust to your backend URL\naxios.defaults.withCredentials = true; // Ensure that cookies are sent with every request, important for authentication\n\n// Function to retrieve CSRF token from cookies\nconst getCSRFToken = () => {\n  var _document$cookie$spli;\n  const csrfToken = (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('csrftoken=')) // Look for the 'csrftoken' cookie\n  ) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1]; // Extract the token value from the cookie\n  return csrfToken;\n};\n\n// Add a request interceptor to automatically include CSRF token in request headers\naxios.interceptors.request.use(config => {\n  const csrfToken = getCSRFToken(); // Get the CSRF token from cookies\n  if (csrfToken) {\n    config.headers['X-CSRFToken'] = csrfToken; // Attach the CSRF token to the headers of each request\n  }\n  return config; // Return the modified config\n}, error => {\n  return Promise.reject(error); // Handle any errors that occur during request setup\n});\n\n// Create separate axios instances for making requests and handling responses\nexport const axiosReq = axios.create(); // Instance for making API requests\nexport const axiosRes = axios.create(); // Instance for handling API responses","map":{"version":3,"names":["axios","defaults","baseURL","withCredentials","getCSRFToken","_document$cookie$spli","csrfToken","document","cookie","split","find","row","startsWith","interceptors","request","use","config","headers","error","Promise","reject","axiosReq","create","axiosRes"],"sources":["C:/Users/marko/Desktop/VS CODE/django-rest-api/frontend/src/api/axiosDefaults.js"],"sourcesContent":["import axios from \"axios\";\r\n\r\n// Set up default configuration for axios\r\naxios.defaults.baseURL = \"https://housegram-fullstack-app-a01c6177ffd8.herokuapp.com\";  // Base URL for all axios requests, adjust to your backend URL\r\naxios.defaults.withCredentials = true;  // Ensure that cookies are sent with every request, important for authentication\r\n\r\n// Function to retrieve CSRF token from cookies\r\nconst getCSRFToken = () => {\r\n  const csrfToken = document.cookie\r\n    .split('; ')\r\n    .find(row => row.startsWith('csrftoken='))  // Look for the 'csrftoken' cookie\r\n    ?.split('=')[1];  // Extract the token value from the cookie\r\n  return csrfToken;\r\n};\r\n\r\n// Add a request interceptor to automatically include CSRF token in request headers\r\naxios.interceptors.request.use((config) => {\r\n  const csrfToken = getCSRFToken();  // Get the CSRF token from cookies\r\n  if (csrfToken) {\r\n    config.headers['X-CSRFToken'] = csrfToken;  // Attach the CSRF token to the headers of each request\r\n  }\r\n  return config;  // Return the modified config\r\n}, (error) => {\r\n  return Promise.reject(error);  // Handle any errors that occur during request setup\r\n});\r\n\r\n// Create separate axios instances for making requests and handling responses\r\nexport const axiosReq = axios.create();  // Instance for making API requests\r\nexport const axiosRes = axios.create();  // Instance for handling API responses\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,4DAA4D,CAAC,CAAE;AACxFF,KAAK,CAACC,QAAQ,CAACE,eAAe,GAAG,IAAI,CAAC,CAAE;;AAExC;AACA,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAA,IAAAC,qBAAA;EACzB,MAAMC,SAAS,IAAAD,qBAAA,GAAGE,QAAQ,CAACC,MAAM,CAC9BC,KAAK,CAAC,IAAI,CAAC,CACXC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAE;EAAA,cAAAP,qBAAA,uBAF5BA,qBAAA,CAGdI,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAE;EACpB,OAAOH,SAAS;AAClB,CAAC;;AAED;AACAN,KAAK,CAACa,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACzC,MAAMV,SAAS,GAAGF,YAAY,CAAC,CAAC,CAAC,CAAE;EACnC,IAAIE,SAAS,EAAE;IACbU,MAAM,CAACC,OAAO,CAAC,aAAa,CAAC,GAAGX,SAAS,CAAC,CAAE;EAC9C;EACA,OAAOU,MAAM,CAAC,CAAE;AAClB,CAAC,EAAGE,KAAK,IAAK;EACZ,OAAOC,OAAO,CAACC,MAAM,CAACF,KAAK,CAAC,CAAC,CAAE;AACjC,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMG,QAAQ,GAAGrB,KAAK,CAACsB,MAAM,CAAC,CAAC,CAAC,CAAE;AACzC,OAAO,MAAMC,QAAQ,GAAGvB,KAAK,CAACsB,MAAM,CAAC,CAAC,CAAC,CAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}