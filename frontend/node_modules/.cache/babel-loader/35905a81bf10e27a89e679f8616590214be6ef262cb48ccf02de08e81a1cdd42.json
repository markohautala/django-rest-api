{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marko\\\\Desktop\\\\VS CODE\\\\django-rest-api\\\\frontend\\\\src\\\\pages\\\\Comments.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie';\nimport styles from '../styles/Home.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Comments({\n  postId,\n  fetchCommentsForPost\n}) {\n  _s();\n  const [comment, setComment] = useState('');\n  const [errors, setErrors] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const handleCommentChange = e => {\n    setComment(e.target.value);\n  };\n  const handleCommentSubmit = async () => {\n    if (comment.trim() === '') {\n      setErrors('Comment cannot be empty');\n      return;\n    }\n    if (!postId) {\n      setErrors('Post ID is invalid');\n      return;\n    }\n    setLoading(true);\n    setErrors(null); // Clear any previous errors\n\n    const csrfToken = Cookies.get('csrftoken');\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setErrors('Authentication token not found. Please log in.');\n      setLoading(false);\n      return;\n    }\n    const newComment = {\n      housepost: postId,\n      comment: comment\n    };\n    try {\n      await axios.post('http://127.0.0.1:8000/housepostcomments/', newComment, {\n        headers: {\n          'Content-Type': 'application/json',\n          'X-CSRFToken': csrfToken,\n          Authorization: `Token ${token}`\n        }\n      });\n      setComment(''); // Clear the comment input\n      fetchCommentsForPost(postId); // Refresh comments after adding a new one\n    } catch (error) {\n      var _error$response, _error$response$data;\n      console.error('Error submitting comment:', error.response ? error.response.data : error.message);\n      const errorMsg = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || 'Failed to submit the comment. Please try again.';\n      setErrors(errorMsg);\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-group mt-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"Add a comment...\",\n      \"aria-label\": \"Add a comment\",\n      value: comment,\n      onChange: handleCommentChange,\n      disabled: loading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `btn ${styles.SubmitButton}`,\n      type: \"button\",\n      onClick: handleCommentSubmit,\n      disabled: loading,\n      children: [loading ? 'Submitting...' : 'Comment', !loading && /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), errors && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-danger mt-2\",\n      children: typeof errors === 'string' ? errors : JSON.stringify(errors)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(Comments, \"c/h4C+iyjTeHg0IX2h4MngIATjw=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","axios","Cookies","styles","jsxDEV","_jsxDEV","Comments","postId","fetchCommentsForPost","_s","comment","setComment","errors","setErrors","loading","setLoading","handleCommentChange","e","target","value","handleCommentSubmit","trim","csrfToken","get","token","localStorage","getItem","newComment","housepost","post","headers","Authorization","error","_error$response","_error$response$data","console","response","data","message","errorMsg","detail","className","children","type","placeholder","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","SubmitButton","onClick","JSON","stringify","_c","$RefreshReg$"],"sources":["C:/Users/marko/Desktop/VS CODE/django-rest-api/frontend/src/pages/Comments.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie';\r\nimport styles from '../styles/Home.module.css';\r\n\r\nfunction Comments({ postId, fetchCommentsForPost }) {\r\n  const [comment, setComment] = useState('');\r\n  const [errors, setErrors] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const handleCommentChange = (e) => {\r\n    setComment(e.target.value);\r\n  };\r\n\r\n  const handleCommentSubmit = async () => {\r\n    if (comment.trim() === '') {\r\n      setErrors('Comment cannot be empty');\r\n      return;\r\n    }\r\n\r\n    if (!postId) {\r\n      setErrors('Post ID is invalid');\r\n      return;\r\n    }\r\n\r\n    setLoading(true);\r\n    setErrors(null);  // Clear any previous errors\r\n\r\n    const csrfToken = Cookies.get('csrftoken');\r\n    const token = localStorage.getItem('token');\r\n\r\n    if (!token) {\r\n      setErrors('Authentication token not found. Please log in.');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const newComment = {\r\n      housepost: postId,\r\n      comment: comment,\r\n    };\r\n\r\n    try {\r\n      await axios.post('http://127.0.0.1:8000/housepostcomments/', newComment, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'X-CSRFToken': csrfToken,\r\n          Authorization: `Token ${token}`,\r\n        },\r\n      });\r\n\r\n      setComment(''); // Clear the comment input\r\n      fetchCommentsForPost(postId); // Refresh comments after adding a new one\r\n    } catch (error) {\r\n      console.error('Error submitting comment:', error.response ? error.response.data : error.message);\r\n      const errorMsg = error.response?.data?.detail || 'Failed to submit the comment. Please try again.';\r\n      setErrors(errorMsg);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-group mt-3\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Add a comment...\"\r\n        aria-label=\"Add a comment\"\r\n        value={comment}\r\n        onChange={handleCommentChange}\r\n        disabled={loading}\r\n      />\r\n      <button\r\n        className={`btn ${styles.SubmitButton}`}\r\n        type=\"button\"\r\n        onClick={handleCommentSubmit}\r\n        disabled={loading}\r\n      >\r\n        {loading ? 'Submitting...' : 'Comment'}\r\n        {!loading && <span className=\"material-symbols-outlined\">send</span>}\r\n      </button>\r\n      {errors && (\r\n        <div className=\"text-danger mt-2\">\r\n          {typeof errors === 'string' ? errors : JSON.stringify(errors)}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,2BAA2B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,QAAQA,CAAC;EAAEC,MAAM;EAAEC;AAAqB,CAAC,EAAE;EAAAC,EAAA;EAClD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACY,MAAM,EAAEC,SAAS,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAC1C,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMgB,mBAAmB,GAAIC,CAAC,IAAK;IACjCN,UAAU,CAACM,CAAC,CAACC,MAAM,CAACC,KAAK,CAAC;EAC5B,CAAC;EAED,MAAMC,mBAAmB,GAAG,MAAAA,CAAA,KAAY;IACtC,IAAIV,OAAO,CAACW,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;MACzBR,SAAS,CAAC,yBAAyB,CAAC;MACpC;IACF;IAEA,IAAI,CAACN,MAAM,EAAE;MACXM,SAAS,CAAC,oBAAoB,CAAC;MAC/B;IACF;IAEAE,UAAU,CAAC,IAAI,CAAC;IAChBF,SAAS,CAAC,IAAI,CAAC,CAAC,CAAE;;IAElB,MAAMS,SAAS,GAAGpB,OAAO,CAACqB,GAAG,CAAC,WAAW,CAAC;IAC1C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAI,CAACF,KAAK,EAAE;MACVX,SAAS,CAAC,gDAAgD,CAAC;MAC3DE,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,MAAMY,UAAU,GAAG;MACjBC,SAAS,EAAErB,MAAM;MACjBG,OAAO,EAAEA;IACX,CAAC;IAED,IAAI;MACF,MAAMT,KAAK,CAAC4B,IAAI,CAAC,0CAA0C,EAAEF,UAAU,EAAE;QACvEG,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,aAAa,EAAER,SAAS;UACxBS,aAAa,EAAE,SAASP,KAAK;QAC/B;MACF,CAAC,CAAC;MAEFb,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;MAChBH,oBAAoB,CAACD,MAAM,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOyB,KAAK,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACdC,OAAO,CAACH,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAACI,QAAQ,GAAGJ,KAAK,CAACI,QAAQ,CAACC,IAAI,GAAGL,KAAK,CAACM,OAAO,CAAC;MAChG,MAAMC,QAAQ,GAAG,EAAAN,eAAA,GAAAD,KAAK,CAACI,QAAQ,cAAAH,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBI,IAAI,cAAAH,oBAAA,uBAApBA,oBAAA,CAAsBM,MAAM,KAAI,iDAAiD;MAClG3B,SAAS,CAAC0B,QAAQ,CAAC;IACrB,CAAC,SAAS;MACRxB,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;EAED,oBACEV,OAAA;IAAKoC,SAAS,EAAC,kBAAkB;IAAAC,QAAA,gBAC/BrC,OAAA;MACEsC,IAAI,EAAC,MAAM;MACXF,SAAS,EAAC,cAAc;MACxBG,WAAW,EAAC,kBAAkB;MAC9B,cAAW,eAAe;MAC1BzB,KAAK,EAAET,OAAQ;MACfmC,QAAQ,EAAE7B,mBAAoB;MAC9B8B,QAAQ,EAAEhC;IAAQ;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnB,CAAC,eACF7C,OAAA;MACEoC,SAAS,EAAE,OAAOtC,MAAM,CAACgD,YAAY,EAAG;MACxCR,IAAI,EAAC,QAAQ;MACbS,OAAO,EAAEhC,mBAAoB;MAC7B0B,QAAQ,EAAEhC,OAAQ;MAAA4B,QAAA,GAEjB5B,OAAO,GAAG,eAAe,GAAG,SAAS,EACrC,CAACA,OAAO,iBAAIT,OAAA;QAAMoC,SAAS,EAAC,2BAA2B;QAAAC,QAAA,EAAC;MAAI;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9D,CAAC,EACRtC,MAAM,iBACLP,OAAA;MAAKoC,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9B,OAAO9B,MAAM,KAAK,QAAQ,GAAGA,MAAM,GAAGyC,IAAI,CAACC,SAAS,CAAC1C,MAAM;IAAC;MAAAmC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1D,CACN;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV;AAACzC,EAAA,CApFQH,QAAQ;AAAAiD,EAAA,GAARjD,QAAQ;AAsFjB,eAAeA,QAAQ;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}