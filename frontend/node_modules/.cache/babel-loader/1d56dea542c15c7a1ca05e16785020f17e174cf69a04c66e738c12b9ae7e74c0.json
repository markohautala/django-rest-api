{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\marko\\\\Desktop\\\\VS CODE\\\\django-rest-api\\\\frontend\\\\src\\\\pages\\\\Comments.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport axios from 'axios';\nimport Cookies from 'js-cookie'; // Import js-cookie for CSRF token handling\nimport styles from '../styles/Home.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Comments({\n  postId,\n  fetchCommentsForPost\n}) {\n  _s();\n  const [comment, setComment] = useState('');\n  const handleCommentChange = e => {\n    setComment(e.target.value);\n  };\n  const handleCommentSubmit = () => {\n    if (comment.trim() === '') {\n      console.error('Comment is empty');\n      return;\n    }\n    if (!postId) {\n      console.error('Post ID is null');\n      return;\n    }\n    const token = localStorage.getItem('token'); // Assuming the token is stored in localStorage\n    const csrfToken = Cookies.get('csrftoken'); // Get CSRF token from cookies\n\n    if (!token) {\n      console.error('No authentication token found');\n      return;\n    }\n    const newComment = {\n      housepost: postId,\n      comment: comment\n    };\n    axios.post('http://127.0.0.1:8000/housepostcomments/', newComment, {\n      headers: {\n        'Authorization': `Token ${token}`,\n        // Include the auth token in the request headers\n        'X-CSRFToken': csrfToken // Include the CSRF token in the request headers\n      }\n    }).then(response => {\n      setComment('');\n      fetchCommentsForPost(postId); // Refresh comments after adding a new one\n    }).catch(error => {\n      console.error('Error submitting comment:', error.response ? error.response.data : error.message);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-group mt-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"form-control\",\n      placeholder: \"Add a comment...\",\n      \"aria-label\": \"Add a comment\",\n      value: comment,\n      onChange: handleCommentChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: `btn ${styles.SubmitButton}`,\n      type: \"button\",\n      onClick: handleCommentSubmit,\n      children: [\"Comment\", /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"material-symbols-outlined\",\n        children: \"send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(Comments, \"vhAvzpEN661Y5K0yhbG0Td/NMg4=\");\n_c = Comments;\nexport default Comments;\nvar _c;\n$RefreshReg$(_c, \"Comments\");","map":{"version":3,"names":["React","useState","axios","Cookies","styles","jsxDEV","_jsxDEV","Comments","postId","fetchCommentsForPost","_s","comment","setComment","handleCommentChange","e","target","value","handleCommentSubmit","trim","console","error","token","localStorage","getItem","csrfToken","get","newComment","housepost","post","headers","then","response","catch","data","message","className","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","SubmitButton","onClick","_c","$RefreshReg$"],"sources":["C:/Users/marko/Desktop/VS CODE/django-rest-api/frontend/src/pages/Comments.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie'; // Import js-cookie for CSRF token handling\r\nimport styles from '../styles/Home.module.css';\r\n\r\nfunction Comments({ postId, fetchCommentsForPost }) {\r\n  const [comment, setComment] = useState('');\r\n\r\n  const handleCommentChange = (e) => {\r\n    setComment(e.target.value);\r\n  };\r\n\r\n  const handleCommentSubmit = () => {\r\n    if (comment.trim() === '') {\r\n      console.error('Comment is empty');\r\n      return;\r\n    }\r\n\r\n    if (!postId) {\r\n      console.error('Post ID is null');\r\n      return;\r\n    }\r\n\r\n    const token = localStorage.getItem('token'); // Assuming the token is stored in localStorage\r\n    const csrfToken = Cookies.get('csrftoken'); // Get CSRF token from cookies\r\n\r\n    if (!token) {\r\n      console.error('No authentication token found');\r\n      return;\r\n    }\r\n\r\n    const newComment = {\r\n      housepost: postId,\r\n      comment: comment,\r\n    };\r\n\r\n    axios.post('http://127.0.0.1:8000/housepostcomments/', newComment, {\r\n      headers: {\r\n        'Authorization': `Token ${token}`, // Include the auth token in the request headers\r\n        'X-CSRFToken': csrfToken, // Include the CSRF token in the request headers\r\n      },\r\n    })\r\n      .then(response => {\r\n        setComment('');\r\n        fetchCommentsForPost(postId);  // Refresh comments after adding a new one\r\n      })\r\n      .catch(error => {\r\n        console.error('Error submitting comment:', error.response ? error.response.data : error.message);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"input-group mt-3\">\r\n      <input\r\n        type=\"text\"\r\n        className=\"form-control\"\r\n        placeholder=\"Add a comment...\"\r\n        aria-label=\"Add a comment\"\r\n        value={comment}\r\n        onChange={handleCommentChange}\r\n      />\r\n      <button className={`btn ${styles.SubmitButton}`} type=\"button\" onClick={handleCommentSubmit}>\r\n        Comment\r\n        <span className=\"material-symbols-outlined\">send</span>\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Comments;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}