{"ast":null,"code":"import React,{useEffect,useState}from'react';import NavigationBar from'./components/NavigationBar';import Container from\"react-bootstrap/Container\";import AppRoutes from'./components/Routes';import\"./api/axiosDefaults\";import styles from'./App.module.css';import{useCurrentUser}from'./context/CurrentUserContext';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const currentUser=useCurrentUser();const[isAuthenticated,setIsAuthenticated]=useState(false);useEffect(()=>{const fetchCSRFToken=async()=>{try{await axios.get('/set-csrf/');console.log('CSRF token should now be set.');}catch(err){console.error('Failed to set CSRF token:',err);}};fetchCSRFToken();if(currentUser){setIsAuthenticated(true);}else{setIsAuthenticated(false);}},[currentUser]);return/*#__PURE__*/_jsxs(\"div\",{className:styles.App,children:[/*#__PURE__*/_jsx(NavigationBar,{isAuthenticated:isAuthenticated}),/*#__PURE__*/_jsx(Container,{className:styles.Main,children:/*#__PURE__*/_jsx(AppRoutes,{isAuthenticated:isAuthenticated})})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","NavigationBar","Container","AppRoutes","styles","useCurrentUser","axios","jsx","_jsx","jsxs","_jsxs","App","currentUser","isAuthenticated","setIsAuthenticated","fetchCSRFToken","get","console","log","err","error","className","children","Main"],"sources":["C:/Users/marko/Desktop/VS CODE/django-rest-api/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport NavigationBar from './components/NavigationBar';\nimport Container from \"react-bootstrap/Container\";\nimport AppRoutes from './components/Routes';\nimport \"./api/axiosDefaults\";\nimport styles from './App.module.css';\nimport { useCurrentUser } from './context/CurrentUserContext';\nimport axios from 'axios';\n\nfunction App() {\n  const currentUser = useCurrentUser();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  useEffect(() => {\n    const fetchCSRFToken = async () => {\n      try {\n        await axios.get('/set-csrf/');\n        console.log('CSRF token should now be set.');\n      } catch (err) {\n        console.error('Failed to set CSRF token:', err);\n      }\n    };\n\n    fetchCSRFToken();\n\n    if (currentUser) {\n      setIsAuthenticated(true);\n    } else {\n      setIsAuthenticated(false);\n    }\n  }, [currentUser]);\n\n  return (\n    <div className={styles.App}>\n      <NavigationBar isAuthenticated={isAuthenticated} />\n      <Container className={styles.Main}>\n        <AppRoutes isAuthenticated={isAuthenticated} />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,aAAa,KAAM,4BAA4B,CACtD,MAAO,CAAAC,SAAS,KAAM,2BAA2B,CACjD,MAAO,CAAAC,SAAS,KAAM,qBAAqB,CAC3C,MAAO,qBAAqB,CAC5B,MAAO,CAAAC,MAAM,KAAM,kBAAkB,CACrC,OAASC,cAAc,KAAQ,8BAA8B,CAC7D,MAAO,CAAAC,KAAK,KAAM,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAE1B,QAAS,CAAAC,GAAGA,CAAA,CAAG,CACb,KAAM,CAAAC,WAAW,CAAGP,cAAc,CAAC,CAAC,CACpC,KAAM,CAACQ,eAAe,CAAEC,kBAAkB,CAAC,CAAGd,QAAQ,CAAC,KAAK,CAAC,CAE7DD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgB,cAAc,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACF,KAAM,CAAAT,KAAK,CAACU,GAAG,CAAC,YAAY,CAAC,CAC7BC,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC9C,CAAE,MAAOC,GAAG,CAAE,CACZF,OAAO,CAACG,KAAK,CAAC,2BAA2B,CAAED,GAAG,CAAC,CACjD,CACF,CAAC,CAEDJ,cAAc,CAAC,CAAC,CAEhB,GAAIH,WAAW,CAAE,CACfE,kBAAkB,CAAC,IAAI,CAAC,CAC1B,CAAC,IAAM,CACLA,kBAAkB,CAAC,KAAK,CAAC,CAC3B,CACF,CAAC,CAAE,CAACF,WAAW,CAAC,CAAC,CAEjB,mBACEF,KAAA,QAAKW,SAAS,CAAEjB,MAAM,CAACO,GAAI,CAAAW,QAAA,eACzBd,IAAA,CAACP,aAAa,EAACY,eAAe,CAAEA,eAAgB,CAAE,CAAC,cACnDL,IAAA,CAACN,SAAS,EAACmB,SAAS,CAAEjB,MAAM,CAACmB,IAAK,CAAAD,QAAA,cAChCd,IAAA,CAACL,SAAS,EAACU,eAAe,CAAEA,eAAgB,CAAE,CAAC,CACtC,CAAC,EACT,CAAC,CAEV,CAEA,cAAe,CAAAF,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}