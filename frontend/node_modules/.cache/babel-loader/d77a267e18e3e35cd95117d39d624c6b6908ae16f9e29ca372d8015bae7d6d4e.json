{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Button,Form,Modal,Row,Col,Alert}from'react-bootstrap';import axios from'axios';import Cookies from'js-cookie';// Library to manage cookies, used here for CSRF tokens\nimport styles from'../styles/Notes.module.css';// Custom styles for the Notes component\nimport loadingSpinner from'../assets/loading.gif';// Loading spinner image\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Notes=()=>{// State hooks for managing different aspects of the Notes component\nconst[notes,setNotes]=useState([]);// Stores the list of notes fetched from the backend\nconst[isLoading,setIsLoading]=useState(true);// Manages loading state while fetching data\nconst[errors,setErrors]=useState(null);// Stores any error messages encountered during requests\nconst[showEditModal,setShowEditModal]=useState(false);// Controls visibility of the Edit Modal\nconst[showDeleteModal,setShowDeleteModal]=useState(false);// Controls visibility of the Delete Modal\nconst[showMaxNotesModal,setShowMaxNotesModal]=useState(false);// Controls visibility of the \"max notes reached\" modal\nconst[currentNote,setCurrentNote]=useState(null);// Stores the index of the currently selected note\nconst[newNote,setNewNote]=useState({// Stores the data for the new note to be created\ntitle:'',content:'',url:''});// State for the note being edited in the modal\nconst[editNote,setEditNote]=useState({title:'',content:'',url:''});// Fetch the notes from the backend when the component is first mounted\nuseEffect(()=>{const fetchNotes=async()=>{try{const response=await axios.get('/notes/',{headers:{Authorization:`Token ${localStorage.getItem('token')}`// Pass the authentication token for the request\n}});setNotes(response.data.results);// Update the notes state with the data from the API\nsetIsLoading(false);// Stop loading once data is fetched\n}catch(error){console.error('Error fetching notes:',error);setErrors('Failed to load notes.');// Show error message if the request fails\nsetIsLoading(false);// Stop loading even in case of error\n}};fetchNotes();// Call the function to fetch notes on component mount\n},[]);// Empty dependency array ensures this runs once after the initial render\n// Updates the newNote state as the user types in the form fields\nconst handleNoteChange=event=>{setNewNote({...newNote,[event.target.name]:event.target.value// Dynamically update fields (title, content, url)\n});};// Updates the editNote state as the user modifies the fields in the Edit Modal\nconst handleEditNoteChange=event=>{setEditNote({...editNote,[event.target.name]:event.target.value// Dynamically update fields for the note being edited\n});};// Adds a new note by sending a POST request to the backend\nconst addNote=async()=>{if(notes.length>=2){// Limit the user to a maximum of 2 notes\nsetShowMaxNotesModal(true);// Show modal if the limit is reached\n}else{try{const csrfToken=Cookies.get('csrftoken');// Retrieve CSRF token for security\nconst response=await axios.post('/notes/',newNote,{headers:{Authorization:`Token ${localStorage.getItem('token')}`,// Authentication token\n'X-CSRFToken':csrfToken// Include CSRF token in request headers\n}});// Add the newly created note to the state\nsetNotes([...notes,response.data]);// Append new note to existing notes\nsetNewNote({title:'',content:'',url:''});// Reset form fields after submission\n}catch(error){console.error('Error adding note:',error);setErrors('Failed to create a new note.');// Show error if the request fails\n}}};// Opens the Edit Modal and pre-populates the form with the selected note's details\nconst handleEditNote=index=>{setCurrentNote(index);// Store the index of the note being edited\nsetEditNote({title:notes[index].title,content:notes[index].content,// Set the content of the note being edited\nurl:notes[index].url});setShowEditModal(true);// Show the Edit Modal\n};// Submits the edited note by sending a PATCH request to update the note on the backend\nconst submitEditNote=async()=>{if(currentNote===null||currentNote===undefined){// Ensure a note is selected for editing\nconsole.error(\"No note selected for editing.\");return;// Exit if no note is selected\n}// Check if there are actual changes before submitting the update\nconst originalNote=notes[currentNote];if(editNote.title===originalNote.title&&editNote.content===originalNote.content&&editNote.url===originalNote.url){console.log(\"No changes detected, no need to submit.\");setShowEditModal(false);// Close modal if no changes were made\nreturn;}const updatedNotes=[...notes];// Create a copy of the current notes state\nupdatedNotes[currentNote]=editNote;// Update the selected note with new data\ntry{const csrfToken=Cookies.get('csrftoken');// Retrieve CSRF token for security\nawait axios.patch(`/notes/${notes[currentNote].id}/`,editNote,{headers:{Authorization:`Token ${localStorage.getItem('token')}`,// Authentication token\n'X-CSRFToken':csrfToken// Include CSRF token\n}});setNotes(updatedNotes);// Update state with the edited note\nsetShowEditModal(false);// Close the Edit Modal on success\n}catch(error){console.error('Error updating note:',error);setErrors('Failed to update the note.');// Display error if the update fails\n}};// Opens the Delete Modal and sets the note to be deleted\nconst handleDeleteNote=index=>{setCurrentNote(index);// Store the index of the note to be deleted\nsetShowDeleteModal(true);// Show the Delete Modal\n};// Confirms and deletes the selected note by sending a DELETE request to the backend\nconst confirmDeleteNote=async()=>{const noteToDelete=notes[currentNote];// Retrieve the selected note\ntry{const csrfToken=Cookies.get('csrftoken');// Retrieve CSRF token for security\nawait axios.delete(`/notes/${noteToDelete.id}/`,{headers:{Authorization:`Token ${localStorage.getItem('token')}`,// Authentication token\n'X-CSRFToken':csrfToken// Include CSRF token in request headers\n}});// Remove the deleted note from the state\nsetNotes(notes.filter((_,index)=>index!==currentNote));// Filter out the deleted note\nsetShowDeleteModal(false);// Close the Delete Modal\n}catch(error){console.error('Error deleting note:',error);setErrors('Failed to delete the note.');// Show error if deletion fails\n}};// Render a loading spinner if data is still being fetched\nif(isLoading){return/*#__PURE__*/_jsx(\"div\",{style:{position:'fixed',top:0,left:0,width:'100%',height:'100%',backgroundColor:'rgba(255, 255, 255, 0.8)',display:'flex',justifyContent:'center',alignItems:'center',zIndex:9999},children:/*#__PURE__*/_jsx(\"img\",{src:loadingSpinner,alt:\"Loading...\",style:{width:'75px',height:'75px'}})});}return/*#__PURE__*/_jsxs(\"div\",{className:styles.notesContainer,children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Notes\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Here you can create notes for yourself - maybe about future houseposts. You can create a maximum of two notes.\"}),errors&&/*#__PURE__*/_jsx(Alert,{variant:\"danger\",children:errors}),/*#__PURE__*/_jsx(\"div\",{className:styles.noteCreationBox,children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Title\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",name:\"title\",value:newNote.title,onChange:handleNoteChange,placeholder:\"Enter title\",required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Description\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",name:\"content\"// Update from description to content\n,value:newNote.content// Update from description to content\n,onChange:handleNoteChange,placeholder:\"Write a description\",required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"URL (Optional)\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"url\",name:\"url\",value:newNote.url,onChange:handleNoteChange,placeholder:\"Enter a URL\"})]}),/*#__PURE__*/_jsx(Button,{variant:\"dark\",onClick:addNote,children:\"Create Note\"}),\" \"]})}),/*#__PURE__*/_jsx(Row,{className:styles.notesRow,children:notes.map((note,index)=>/*#__PURE__*/_jsx(Col,{md:6,className:styles.noteCol,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.noteCard,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.noteHeader,children:[/*#__PURE__*/_jsx(\"span\",{className:\"btn btn-danger btn-sm\",onClick:()=>handleDeleteNote(index),children:\"Delete\"}),\" \",/*#__PURE__*/_jsx(\"span\",{className:`material-symbols-outlined ${styles.gearIcon}`,onClick:()=>handleEditNote(index)// Trigger edit modal\n,children:\"settings\"})]}),/*#__PURE__*/_jsx(\"h4\",{children:note.title}),/*#__PURE__*/_jsx(\"p\",{children:note.content}),\" \",note.url&&/*#__PURE__*/_jsx(\"a\",{href:note.url,target:\"_blank\",rel:\"noopener noreferrer\",children:\"Visit Link\"}),\" \"]})},index))}),/*#__PURE__*/_jsxs(Modal,{show:showEditModal,onHide:()=>setShowEditModal(false),children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Edit Note\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:/*#__PURE__*/_jsxs(Form,{children:[/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Title\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"text\",name:\"title\",value:editNote.title,onChange:handleEditNoteChange,required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"Description\"}),/*#__PURE__*/_jsx(Form.Control,{as:\"textarea\",name:\"content\",value:editNote.content,onChange:handleEditNoteChange,required:true})]}),/*#__PURE__*/_jsxs(Form.Group,{children:[/*#__PURE__*/_jsx(Form.Label,{children:\"URL\"}),/*#__PURE__*/_jsx(Form.Control,{type:\"url\",name:\"url\",value:editNote.url,onChange:handleEditNoteChange})]})]})}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:()=>setShowEditModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{variant:\"primary\",onClick:submitEditNote,children:\"Save Changes\"}),\" \"]})]}),/*#__PURE__*/_jsxs(Modal,{show:showDeleteModal,onHide:()=>setShowDeleteModal(false),children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Confirm Deletion\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:\"Are you sure you want to delete this note?\"}),/*#__PURE__*/_jsxs(Modal.Footer,{children:[/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:()=>setShowDeleteModal(false),children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{variant:\"danger\",onClick:confirmDeleteNote,children:\"Delete\"}),\" \"]})]}),/*#__PURE__*/_jsxs(Modal,{show:showMaxNotesModal,onHide:()=>setShowMaxNotesModal(false),children:[/*#__PURE__*/_jsx(Modal.Header,{closeButton:true,children:/*#__PURE__*/_jsx(Modal.Title,{children:\"Note Limit Reached\"})}),/*#__PURE__*/_jsx(Modal.Body,{children:\"You have reached the maximum limit of 2 notes. Please delete an existing note to create a new one.\"}),/*#__PURE__*/_jsx(Modal.Footer,{children:/*#__PURE__*/_jsx(Button,{variant:\"secondary\",onClick:()=>setShowMaxNotesModal(false),children:\"Close\"})})]})]});};export default Notes;","map":{"version":3,"names":["React","useState","useEffect","Button","Form","Modal","Row","Col","Alert","axios","Cookies","styles","loadingSpinner","jsx","_jsx","jsxs","_jsxs","Notes","notes","setNotes","isLoading","setIsLoading","errors","setErrors","showEditModal","setShowEditModal","showDeleteModal","setShowDeleteModal","showMaxNotesModal","setShowMaxNotesModal","currentNote","setCurrentNote","newNote","setNewNote","title","content","url","editNote","setEditNote","fetchNotes","response","get","headers","Authorization","localStorage","getItem","data","results","error","console","handleNoteChange","event","target","name","value","handleEditNoteChange","addNote","length","csrfToken","post","handleEditNote","index","submitEditNote","undefined","originalNote","log","updatedNotes","patch","id","handleDeleteNote","confirmDeleteNote","noteToDelete","delete","filter","_","style","position","top","left","width","height","backgroundColor","display","justifyContent","alignItems","zIndex","children","src","alt","className","notesContainer","variant","noteCreationBox","Group","Label","Control","type","onChange","placeholder","required","as","onClick","notesRow","map","note","md","noteCol","noteCard","noteHeader","gearIcon","href","rel","show","onHide","Header","closeButton","Title","Body","Footer"],"sources":["C:/Users/marko/Desktop/VS CODE/django-rest-api/frontend/src/pages/Notes.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Button, Form, Modal, Row, Col, Alert } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport Cookies from 'js-cookie'; // Library to manage cookies, used here for CSRF tokens\r\nimport styles from '../styles/Notes.module.css'; // Custom styles for the Notes component\r\nimport loadingSpinner from '../assets/loading.gif'; // Loading spinner image\r\n\r\nconst Notes = () => {\r\n  // State hooks for managing different aspects of the Notes component\r\n  const [notes, setNotes] = useState([]); // Stores the list of notes fetched from the backend\r\n  const [isLoading, setIsLoading] = useState(true); // Manages loading state while fetching data\r\n  const [errors, setErrors] = useState(null); // Stores any error messages encountered during requests\r\n  const [showEditModal, setShowEditModal] = useState(false); // Controls visibility of the Edit Modal\r\n  const [showDeleteModal, setShowDeleteModal] = useState(false); // Controls visibility of the Delete Modal\r\n  const [showMaxNotesModal, setShowMaxNotesModal] = useState(false); // Controls visibility of the \"max notes reached\" modal\r\n  const [currentNote, setCurrentNote] = useState(null); // Stores the index of the currently selected note\r\n  const [newNote, setNewNote] = useState({ // Stores the data for the new note to be created\r\n    title: '',\r\n    content: '',\r\n    url: ''\r\n  });\r\n\r\n  // State for the note being edited in the modal\r\n  const [editNote, setEditNote] = useState({\r\n    title: '',\r\n    content: '',\r\n    url: ''\r\n  });\r\n\r\n  // Fetch the notes from the backend when the component is first mounted\r\n  useEffect(() => {\r\n    const fetchNotes = async () => {\r\n      try {\r\n        const response = await axios.get('/notes/', {\r\n          headers: {\r\n            Authorization: `Token ${localStorage.getItem('token')}`, // Pass the authentication token for the request\r\n          },\r\n        });\r\n        setNotes(response.data.results); // Update the notes state with the data from the API\r\n        setIsLoading(false); // Stop loading once data is fetched\r\n      } catch (error) {\r\n        console.error('Error fetching notes:', error);\r\n        setErrors('Failed to load notes.'); // Show error message if the request fails\r\n        setIsLoading(false); // Stop loading even in case of error\r\n      }\r\n    };\r\n\r\n    fetchNotes(); // Call the function to fetch notes on component mount\r\n  }, []); // Empty dependency array ensures this runs once after the initial render\r\n\r\n  // Updates the newNote state as the user types in the form fields\r\n  const handleNoteChange = (event) => {\r\n    setNewNote({\r\n      ...newNote,\r\n      [event.target.name]: event.target.value, // Dynamically update fields (title, content, url)\r\n    });\r\n  };\r\n\r\n  // Updates the editNote state as the user modifies the fields in the Edit Modal\r\n  const handleEditNoteChange = (event) => {\r\n    setEditNote({\r\n      ...editNote,\r\n      [event.target.name]: event.target.value, // Dynamically update fields for the note being edited\r\n    });\r\n  };\r\n\r\n  // Adds a new note by sending a POST request to the backend\r\n  const addNote = async () => {\r\n    if (notes.length >= 2) { // Limit the user to a maximum of 2 notes\r\n      setShowMaxNotesModal(true); // Show modal if the limit is reached\r\n    } else {\r\n      try {\r\n        const csrfToken = Cookies.get('csrftoken'); // Retrieve CSRF token for security\r\n        const response = await axios.post('/notes/', newNote, {\r\n          headers: {\r\n            Authorization: `Token ${localStorage.getItem('token')}`, // Authentication token\r\n            'X-CSRFToken': csrfToken, // Include CSRF token in request headers\r\n          },\r\n        });\r\n        // Add the newly created note to the state\r\n        setNotes([...notes, response.data]); // Append new note to existing notes\r\n        setNewNote({ title: '', content: '', url: '' }); // Reset form fields after submission\r\n      } catch (error) {\r\n        console.error('Error adding note:', error);\r\n        setErrors('Failed to create a new note.'); // Show error if the request fails\r\n      }\r\n    }\r\n  };\r\n\r\n  // Opens the Edit Modal and pre-populates the form with the selected note's details\r\n  const handleEditNote = (index) => {\r\n    setCurrentNote(index); // Store the index of the note being edited\r\n    setEditNote({\r\n      title: notes[index].title,\r\n      content: notes[index].content, // Set the content of the note being edited\r\n      url: notes[index].url,\r\n    });\r\n    setShowEditModal(true); // Show the Edit Modal\r\n  };\r\n\r\n  // Submits the edited note by sending a PATCH request to update the note on the backend\r\n  const submitEditNote = async () => {\r\n    if (currentNote === null || currentNote === undefined) { // Ensure a note is selected for editing\r\n      console.error(\"No note selected for editing.\");\r\n      return; // Exit if no note is selected\r\n    }\r\n\r\n    // Check if there are actual changes before submitting the update\r\n    const originalNote = notes[currentNote];\r\n    if (\r\n      editNote.title === originalNote.title &&\r\n      editNote.content === originalNote.content &&\r\n      editNote.url === originalNote.url\r\n    ) {\r\n      console.log(\"No changes detected, no need to submit.\");\r\n      setShowEditModal(false); // Close modal if no changes were made\r\n      return;\r\n    }\r\n\r\n    const updatedNotes = [...notes]; // Create a copy of the current notes state\r\n    updatedNotes[currentNote] = editNote; // Update the selected note with new data\r\n\r\n    try {\r\n      const csrfToken = Cookies.get('csrftoken'); // Retrieve CSRF token for security\r\n      await axios.patch(`/notes/${notes[currentNote].id}/`, editNote, {\r\n        headers: {\r\n          Authorization: `Token ${localStorage.getItem('token')}`, // Authentication token\r\n          'X-CSRFToken': csrfToken, // Include CSRF token\r\n        },\r\n      });\r\n\r\n      setNotes(updatedNotes); // Update state with the edited note\r\n      setShowEditModal(false); // Close the Edit Modal on success\r\n    } catch (error) {\r\n      console.error('Error updating note:', error);\r\n      setErrors('Failed to update the note.'); // Display error if the update fails\r\n    }\r\n  };\r\n\r\n  // Opens the Delete Modal and sets the note to be deleted\r\n  const handleDeleteNote = (index) => {\r\n    setCurrentNote(index); // Store the index of the note to be deleted\r\n    setShowDeleteModal(true); // Show the Delete Modal\r\n  };\r\n\r\n  // Confirms and deletes the selected note by sending a DELETE request to the backend\r\n  const confirmDeleteNote = async () => {\r\n    const noteToDelete = notes[currentNote]; // Retrieve the selected note\r\n\r\n    try {\r\n      const csrfToken = Cookies.get('csrftoken'); // Retrieve CSRF token for security\r\n      await axios.delete(`/notes/${noteToDelete.id}/`, {\r\n        headers: {\r\n          Authorization: `Token ${localStorage.getItem('token')}`, // Authentication token\r\n          'X-CSRFToken': csrfToken, // Include CSRF token in request headers\r\n        },\r\n      });\r\n\r\n      // Remove the deleted note from the state\r\n      setNotes(notes.filter((_, index) => index !== currentNote)); // Filter out the deleted note\r\n      setShowDeleteModal(false); // Close the Delete Modal\r\n    } catch (error) {\r\n      console.error('Error deleting note:', error);\r\n      setErrors('Failed to delete the note.'); // Show error if deletion fails\r\n    }\r\n  };\r\n\r\n  // Render a loading spinner if data is still being fetched\r\n  if (isLoading) {\r\n    return (\r\n      <div style={{\r\n        position: 'fixed',\r\n        top: 0,\r\n        left: 0,\r\n        width: '100%',\r\n        height: '100%',\r\n        backgroundColor: 'rgba(255, 255, 255, 0.8)',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        zIndex: 9999,\r\n      }}>\r\n        <img src={loadingSpinner} alt=\"Loading...\" style={{ width: '75px', height: '75px' }} />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={styles.notesContainer}>\r\n      {/* Section for creating a new note */}\r\n      <h2>Notes</h2>\r\n      <p>Here you can create notes for yourself - maybe about future houseposts. You can create a maximum of two notes.</p>\r\n\r\n      {/* Display errors if any */}\r\n      {errors && <Alert variant=\"danger\">{errors}</Alert>}\r\n\r\n      {/* Form for creating a new note */}\r\n      <div className={styles.noteCreationBox}>\r\n        <Form>\r\n          <Form.Group>\r\n            <Form.Label>Title</Form.Label>\r\n            <Form.Control\r\n              type=\"text\"\r\n              name=\"title\"\r\n              value={newNote.title}\r\n              onChange={handleNoteChange}\r\n              placeholder=\"Enter title\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>Description</Form.Label>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              name=\"content\" // Update from description to content\r\n              value={newNote.content} // Update from description to content\r\n              onChange={handleNoteChange}\r\n              placeholder=\"Write a description\"\r\n              required\r\n            />\r\n          </Form.Group>\r\n          <Form.Group>\r\n            <Form.Label>URL (Optional)</Form.Label>\r\n            <Form.Control\r\n              type=\"url\"\r\n              name=\"url\"\r\n              value={newNote.url}\r\n              onChange={handleNoteChange}\r\n              placeholder=\"Enter a URL\"\r\n            />\r\n          </Form.Group>\r\n          <Button variant=\"dark\" onClick={addNote}>Create Note</Button> {/* Trigger addNote on click */}\r\n        </Form>\r\n      </div>\r\n\r\n      {/* Section for displaying the existing notes */}\r\n      <Row className={styles.notesRow}>\r\n        {notes.map((note, index) => (\r\n          <Col md={6} key={index} className={styles.noteCol}>\r\n            <div className={styles.noteCard}>\r\n              <div className={styles.noteHeader}>\r\n                <span className=\"btn btn-danger btn-sm\" onClick={() => handleDeleteNote(index)}>Delete</span> {/* Trigger deletion */}\r\n                <span\r\n                  className={`material-symbols-outlined ${styles.gearIcon}`}\r\n                  onClick={() => handleEditNote(index)} // Trigger edit modal\r\n                >\r\n                  settings\r\n                </span>\r\n              </div>\r\n              <h4>{note.title}</h4>\r\n              <p>{note.content}</p> {/* Display note content */}\r\n              {note.url && <a href={note.url} target=\"_blank\" rel=\"noopener noreferrer\">Visit Link</a>} {/* Optional URL */}\r\n            </div>\r\n          </Col>\r\n        ))}\r\n      </Row>\r\n\r\n      {/* Edit Note Modal */}\r\n      <Modal show={showEditModal} onHide={() => setShowEditModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Edit Note</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          <Form>\r\n            <Form.Group>\r\n              <Form.Label>Title</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                name=\"title\"\r\n                value={editNote.title}\r\n                onChange={handleEditNoteChange}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>Description</Form.Label>\r\n              <Form.Control\r\n                as=\"textarea\"\r\n                name=\"content\"\r\n                value={editNote.content}\r\n                onChange={handleEditNoteChange}\r\n                required\r\n              />\r\n            </Form.Group>\r\n            <Form.Group>\r\n              <Form.Label>URL</Form.Label>\r\n              <Form.Control\r\n                type=\"url\"\r\n                name=\"url\"\r\n                value={editNote.url}\r\n                onChange={handleEditNoteChange}\r\n              />\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowEditModal(false)}>Cancel</Button>\r\n          <Button variant=\"primary\" onClick={submitEditNote}>Save Changes</Button> {/* Submit edit */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Delete Note Modal */}\r\n      <Modal show={showDeleteModal} onHide={() => setShowDeleteModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Confirm Deletion</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>Are you sure you want to delete this note?</Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowDeleteModal(false)}>Cancel</Button>\r\n          <Button variant=\"danger\" onClick={confirmDeleteNote}>Delete</Button> {/* Confirm deletion */}\r\n        </Modal.Footer>\r\n      </Modal>\r\n\r\n      {/* Max Notes Modal */}\r\n      <Modal show={showMaxNotesModal} onHide={() => setShowMaxNotesModal(false)}>\r\n        <Modal.Header closeButton>\r\n          <Modal.Title>Note Limit Reached</Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body>\r\n          You have reached the maximum limit of 2 notes. Please delete an existing note to create a new one.\r\n        </Modal.Body>\r\n        <Modal.Footer>\r\n          <Button variant=\"secondary\" onClick={() => setShowMaxNotesModal(false)}>Close</Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notes;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}