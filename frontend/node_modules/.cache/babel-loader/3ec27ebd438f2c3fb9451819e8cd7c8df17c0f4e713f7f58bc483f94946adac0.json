{"ast":null,"code":"import{createContext,useContext,useEffect,useMemo,useState}from\"react\";import axios from\"axios\";import{axiosReq,axiosRes}from\"../api/axiosDefaults\";import{useNavigate}from'react-router-dom';import{removeTokenTimestamp,shouldRefreshToken}from\"../utils/utils\";// Create contexts to store the current user and provide a way to update it\nimport{jsxs as _jsxs,jsx as _jsx}from\"react/jsx-runtime\";export const CurrentUserContext=/*#__PURE__*/createContext();export const SetCurrentUserContext=/*#__PURE__*/createContext();// Custom hooks to easily access the current user and set user contexts\nexport const useCurrentUser=()=>useContext(CurrentUserContext);export const useSetCurrentUser=()=>useContext(SetCurrentUserContext);export const CurrentUserProvider=_ref=>{let{children}=_ref;// State to hold the current user information\nconst[currentUser,setCurrentUser]=useState(null);const navigate=useNavigate();// Function to fetch the current user information on component mount\nconst handleMount=async()=>{try{const{data}=await axiosRes.get(\"dj-rest-auth/user/\");setCurrentUser(data);// Set the current user state with fetched data\n}catch(err){// Handle errors silently (could add error handling here if needed)\n}};// useEffect to run the handleMount function when the component mounts\nuseEffect(()=>{handleMount();},[]);// useMemo to set up axios interceptors that handle token refresh and error responses\nuseMemo(()=>{// Request interceptor to refresh the token if needed before making requests\naxiosReq.interceptors.request.use(async config=>{if(shouldRefreshToken()){try{await axios.post(\"/dj-rest-auth/token/refresh/\");// Refresh the token if needed\n}catch(err){setCurrentUser(null);// If refresh fails, clear the current user\nnavigate(\"/signin\");// Redirect to the sign-in page\nremoveTokenTimestamp();// Clear token timestamp\nreturn config;}}return config;// Proceed with the request\n},err=>Promise.reject(err));// Response interceptor to handle unauthorized responses\naxiosRes.interceptors.response.use(response=>response,async err=>{var _err$response;if(((_err$response=err.response)===null||_err$response===void 0?void 0:_err$response.status)===401){// If the error is 401 (Unauthorized)\ntry{await axios.post(\"/dj-rest-auth/token/refresh/\");// Attempt to refresh the token\n}catch(err){setCurrentUser(null);// If refresh fails, clear the current user\nnavigate(\"/signin\");// Redirect to the sign-in page\nremoveTokenTimestamp();// Clear token timestamp\n}return axios(err.config);// Retry the original request with the refreshed token\n}return Promise.reject(err);// For other errors, just reject the promise\n});},[navigate]);// Re-run this effect when `navigate` changes\n// Return the provider components to wrap the application or parts of it with user context\nreturn/*#__PURE__*/_jsx(CurrentUserContext.Provider,{value:currentUser,children:/*#__PURE__*/_jsxs(SetCurrentUserContext.Provider,{value:setCurrentUser,children:[children,\" \"]})});};","map":{"version":3,"names":["createContext","useContext","useEffect","useMemo","useState","axios","axiosReq","axiosRes","useNavigate","removeTokenTimestamp","shouldRefreshToken","jsxs","_jsxs","jsx","_jsx","CurrentUserContext","SetCurrentUserContext","useCurrentUser","useSetCurrentUser","CurrentUserProvider","_ref","children","currentUser","setCurrentUser","navigate","handleMount","data","get","err","interceptors","request","use","config","post","Promise","reject","response","_err$response","status","Provider","value"],"sources":["C:/Users/marko/Desktop/VS CODE/django-rest-api/frontend/src/context/CurrentUserContext.js"],"sourcesContent":["import { createContext, useContext, useEffect, useMemo, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport { axiosReq, axiosRes } from \"../api/axiosDefaults\";\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { removeTokenTimestamp, shouldRefreshToken } from \"../utils/utils\";\r\n\r\n// Create contexts to store the current user and provide a way to update it\r\nexport const CurrentUserContext = createContext();\r\nexport const SetCurrentUserContext = createContext();\r\n\r\n// Custom hooks to easily access the current user and set user contexts\r\nexport const useCurrentUser = () => useContext(CurrentUserContext);\r\nexport const useSetCurrentUser = () => useContext(SetCurrentUserContext);\r\n\r\nexport const CurrentUserProvider = ({ children }) => {\r\n  // State to hold the current user information\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Function to fetch the current user information on component mount\r\n  const handleMount = async () => {\r\n    try {\r\n      const { data } = await axiosRes.get(\"dj-rest-auth/user/\");\r\n      setCurrentUser(data); // Set the current user state with fetched data\r\n    } catch (err) {\r\n      // Handle errors silently (could add error handling here if needed)\r\n    }\r\n  };\r\n\r\n  // useEffect to run the handleMount function when the component mounts\r\n  useEffect(() => {\r\n    handleMount();\r\n  }, []);\r\n\r\n  // useMemo to set up axios interceptors that handle token refresh and error responses\r\n  useMemo(() => {\r\n    // Request interceptor to refresh the token if needed before making requests\r\n    axiosReq.interceptors.request.use(\r\n      async (config) => {\r\n        if (shouldRefreshToken()) {\r\n          try {\r\n            await axios.post(\"/dj-rest-auth/token/refresh/\"); // Refresh the token if needed\r\n          } catch (err) {\r\n            setCurrentUser(null); // If refresh fails, clear the current user\r\n            navigate(\"/signin\"); // Redirect to the sign-in page\r\n            removeTokenTimestamp(); // Clear token timestamp\r\n            return config;\r\n          }\r\n        }\r\n        return config; // Proceed with the request\r\n      },\r\n      (err) => Promise.reject(err)\r\n    );\r\n\r\n    // Response interceptor to handle unauthorized responses\r\n    axiosRes.interceptors.response.use(\r\n      (response) => response,\r\n      async (err) => {\r\n        if (err.response?.status === 401) { // If the error is 401 (Unauthorized)\r\n          try {\r\n            await axios.post(\"/dj-rest-auth/token/refresh/\"); // Attempt to refresh the token\r\n          } catch (err) {\r\n            setCurrentUser(null); // If refresh fails, clear the current user\r\n            navigate(\"/signin\"); // Redirect to the sign-in page\r\n            removeTokenTimestamp(); // Clear token timestamp\r\n          }\r\n          return axios(err.config); // Retry the original request with the refreshed token\r\n        }\r\n        return Promise.reject(err); // For other errors, just reject the promise\r\n      }\r\n    );\r\n  }, [navigate]); // Re-run this effect when `navigate` changes\r\n\r\n  // Return the provider components to wrap the application or parts of it with user context\r\n  return (\r\n    <CurrentUserContext.Provider value={currentUser}>\r\n      <SetCurrentUserContext.Provider value={setCurrentUser}>\r\n        {children} {/* Render any child components that need access to this context */}\r\n      </SetCurrentUserContext.Provider>\r\n    </CurrentUserContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}